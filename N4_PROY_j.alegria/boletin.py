# -*- coding: utf-8 -*-
"""
Ejercicio nivel 4: Bolet√≠n Estad√≠stico.
M√≥dulo de funciones.

Temas:
* Recorridos de Matrices.
* Librer√≠as de Matplotlib.

@author: zejiran
"""


def cargar_matriz_estadisticas(ruta_archivo: str) -> list:
    """
    Esta funcion carga la informacion de la matriz de estad√≠sticas
    de las facultades a partir de un archivo CSV.
        ruta_archivo (str): la ruta del archivo que se quiere cargar
    Retorno: list
        La matriz con las estadisticas por facultad
    """
    archivo = open(ruta_archivo)
    linea = archivo.readline()
    facultades = 11
    elementos = 9
    estadisticas = list()
    for i in range(0, facultades + 1):
        estadisticas.append([0] * (elementos + 1))
    i = 0
    while len(linea) > 0:
        datos = linea.split(",")
        for j in range(0, elementos + 1):
            estadisticas[i][j] = datos[j].strip()
        i += 1
        linea = archivo.readline()
    archivo.close()
    return estadisticas


def cargar_matriz_puestos(ruta_archivo: str) -> list:
    """
    Esta funcion carga la informacion de la matriz de puestos estudiante 
    a partir de un archivo CSV.
        ruta_archivo (str): la ruta del archivo que se quiere cargar
    Retorno: list
        La matriz con los puestos estudiante de cada facultad
    """
    archivo1 = open(ruta_archivo)
    linea = archivo1.readline()
    oferentes = 11
    ocupantes = 12
    puestos = []
    for i in range(0, oferentes + 1):
        puestos.append([0] * (ocupantes + 1))
    i = 0
    while len(linea) > 0:
        datos = linea.split(",")
        for j in range(0, ocupantes + 1):
            puestos[i][j] = datos[j].strip()
        i += 1
        linea = archivo1.readline()
    archivo1.close()
    return puestos


def cargar_matriz_dobles(ruta_archivo: str) -> list:
    """
    Esta funcion carga la informacion de la matriz de dobles programas
    a partir de un archivo CSV.
        ruta_archivo (str): la ruta del archivo que se quiere cargar
    Retorno: list
        La matriz con los puestos estudiante de cada facultad
    """
    archivo2 = open(ruta_archivo)
    linea = archivo2.readline()
    programas = 35
    dobles = []
    for i in range(0, programas + 1):
        dobles.append([0] * (programas + 1))
    i = 0
    while len(linea) > 0:
        datos = linea.split(",")
        for j in range(0, programas + 1):
            dobles[i][j] = datos[j].strip()
        i += 1
        linea = archivo2.readline()
    archivo2.close()
    return dobles


def puestos_atendidos(matriz_puestos: list, facultad_interes: str) -> int:
    """
    Funci√≥n 1 ‚Äì Puestos estudiante ofrecidos (o atendidos) por una Facultad.

    :param matriz_puestos: la matriz de puestos estudiante.
    :param facultad_interes: facultad de inter√©s.
    :return: retorna valor entero con la cantidad de puestos ofrecidos por dicha facultad.

    :type matriz_puestos: list.
    :type facultad_interes: str.
    :rtype: int.

    :Ejemplo: la Facultad de Econom√≠a atiende un total de 4107 puestos estudiante.
    """
    puestos_facultad = 0
    for fila in matriz_puestos:
        if fila[0].lower() == facultad_interes.lower():
            for columna in range(1, len(fila)):
                puestos_actual = fila[columna]
                puestos_facultad += int(puestos_actual)
    return puestos_facultad


def puestos_ocupados(matriz_puestos: list, facultad_interes: str) -> int:
    """
    Funci√≥n 2 ‚Äì Puestos estudiante ocupados por una Facultad.

    :param matriz_puestos: la matriz de puestos estudiante.
    :param facultad_interes: facultad de inter√©s.
    :return: retorna la cantidad de puestos ocupados por estudiantes de dicha facultad.

    :type matriz_puestos: list.
    :type facultad_interes: str.
    :rtype: int.

    :Ejemplo: la Facultad de Educaci√≥n ocupa un total de 185 puestos estudiante.
    """
    puestos_ocupados = 0
    for columna in range(1, len(matriz_puestos[0])):
        if matriz_puestos[0][columna].lower() == facultad_interes.lower():
            for fila in range(1, len(matriz_puestos)):
                puestos_actual = matriz_puestos[fila][columna]
                puestos_ocupados += int(puestos_actual)
    return puestos_ocupados


def facultad_mas_servicial(matriz_puestos: list) -> tuple:
    """ TODO
    Funci√≥n 3 ‚Äì Facultad m√°s servicial.
    La facultad m√°s servicial es aquella que atiende un mayor n√∫mero de puestos estudiante de otras facultades,
    comparativamente con sus propios puestos estudiante atendidos.

    :param matriz_puestos: la matriz de puestos estudiante.
    :return: retorna una tupla con la informaci√≥n de la facultad m√°s servicial.

    :type matriz_puestos: list.
    :rtype: tuple.

    :Ejemplo: a facultad de medicina atiende un total de 4444 puestos estudiante. De estos puestos,
    4318 son de estudiantes de medicina y tan solo 126 son de otras facultades. Por consiguiente,
    la relaci√≥n puestos de otras facultades/puestos propios es: 126/4444 = 0.028. Esto quiere decir que solo el 2.83%
    de los puestos estudiante de la Facultad de Medicina son tomados por estudiantes de otras facultades.
    Es f√°cil deducir que Medicina no es la facultad m√°s servicial, seg√∫n esta definici√≥n.
    La primera posici√≥n de la tupla que retorna esta funci√≥n debe ser el nombre de la facultad m√°s servicial
    y la segunda posici√≥n de la tupla, el porcentaje de puestos estudiante de las dem√°s facultades que son atendidos
    por dicha facultad (redondeado a dos decimales).
    """


def hay_facultad_generosa(matriz_puestos: list, facultad: str, porcentaje_puestos: float) -> tuple:
    """ TODO
    Funci√≥n 4 ‚Äì Existe facultad generosa.
    Indica si en la Universidad existe alguna facultad que atienda un porcentaje de puestos estudiante
    de la facultad de inter√©s, que sea igual o superior al ingresado por par√°metro.

    :param matriz_puestos: matriz de puestos estudiante.
    :param facultad: nombre de una facultad de inter√©s.
    :param porcentaje_puestos: un porcentaje (valor real de 0 a 100) de puestos estudiante
    :return: retorna:
        - Tupla cuyo primer valor sea el nombre de la facultad encontrada, y el segundo valor sea el porcentaje
        de puestos estudiante cubiertos por dicha facultad (redondeado a 2 decimales).
        - En caso de que ninguna facultad atienda m√°s de este porcentaje de puestos estudiante, la funci√≥n debe retornar
        la tupla (‚ÄúNo existe facultad generosa‚Äù, 0).
        - En caso de que varias facultades sobrepasen este porcentaje,
        la funci√≥n debe retornar la primera que encuentre.

    :type matriz_puestos: list.
    :type facultad: str.
    :type porcentaje_puestos: float.
    :rtype: tuple.

    :Ejemplo: supongamos que la facultad de inter√©s es Medicina y el porcentaje recibido por par√°metro es 5.
    Sabemos que la Facultad de Medicina ocupa un total de 6350 puestos estudiante. El 5 por ciento de este valor es 317.
    Esta funci√≥n debe entonces buscar en la matriz de puestos, una facultad que atienda al menos
    317 puestos estudiante de medicina. La Facultad de Ciencias cumple con esta condici√≥n,
    ya que atiende 1179 puestos estudiante de Medicina, lo cual equivale al 18.57% del total de puestos estudiante
    de Medicina. La Facultad de Ciencias Sociales cumple igualmente con esta condici√≥n, ya que atiende 477 puestos
    estudiante de Medicina, lo cual equivale al 7.51% del total de puestos estudiante de Medicina. Esta funci√≥n
    debe entonces retornar alguna de estas dos facultades, la que encuentre primero, junto con el
    porcentaje de atenci√≥n correspondiente.
    """


def calcular_autocubrimiento(matriz_puestos: list, matriz_facultades: list) -> list:
    """ TODO
    Funci√≥n 5 ‚Äì Porcentaje de autocubrimiento.
    Calcula el porcentaje de autocubrimiento de todas las facultades.

    El porcentaje de autocubrimiento de una facultad X es definido de la siguiente manera:
    ùëéùë¢ùë°ùëúùëêùë¢ùëèùëüùëñùëöùëñùëíùëõùë°ùëú ùëëùëí ùëã = ùëùùë¢ùëíùë†ùë°ùëúùë† ùëíùë†ùë°ùë¢ùëëùëñùëéùëõùë°ùëí ùëúùëêùë¢ùëùùëéùëëùëúùë† ùëùùëúùëü ùëã / ùëùùë¢ùëíùë†ùë°ùëúùë† ùëíùë†ùë°ùë¢ùëëùëñùëéùëõùë°ùëí ùëúùëìùëüùëíùëêùëñùëëùëúùë† ùëùùëúùëü ùëã
    Despu√©s de calcular esta informaci√≥n para cada facultad de la universidad, se agrega una
    nueva columna a la matriz de informaci√≥n estad√≠stica de facultades, en la cual guardar√° el valor calculado
    para cada una de las facultades (redondeados a 2 decimales).
    Se pone como t√≠tulo de columna 'Porcentaje de autocubrimiento'.
    Si ya exist√≠a la columna no importa, de todas formas se agrega.

    :param matriz_puestos: la matriz de puestos estudiante.
    :param matriz_facultades: la matriz de estad√≠sticas de facultades.
    :return: retorna la matriz de estad√≠sticas modificada.


     :type matriz_puestos: list.
     :type matriz_facultades: list.
     :rtype: list.
    """


def doble_mas_comun(matriz_dobles: list) -> tuple:
    """ TODO
    Funci√≥n 6 ‚Äì Doble programa m√°s popular.
    Indica cu√°l es el doble programa m√°s popular entre los estudiantes.
    Es equivalente estar inscrito en el Programa1 y tener un doble programa con el programa2,
    que estar inscrito en el Programa2 y hacer doble con el Programa1.

    :param matriz_dobles: matriz de dobles programas.
    :return: retorna una tupla, cuya primera posici√≥n es una cadena de caracteres de la forma ‚ÄúPrograma1 ‚Äì Programa2‚Äù
    y la segunda posici√≥n es el n√∫mero de estudiantes que cursan este doble programa.

    :type matriz_dobles: list.
    :rtype: tuple.

    :Ejemplo: Hay 15 estudiantes inscritos en Ingenier√≠a Mec√°nica y que est√°n cursando Dise√±o como segundo programa.
    Por otra parte, hay 1 estudiante de Dise√±o, cursando Ingenier√≠a Mec√°nica como segundo programa.
    Por consiguiente el doble programa ‚ÄúIng. Mecanica ‚Äì Dise√±o‚Äù cuenta con 16 estudiantes.
    """


def dobles_de_un_programa(matriz_dobles: list, programa_interes: str) -> dict:
    """ TODO
    Funci√≥n 7 ‚Äì Dobles programas con un programa de inter√©s.
    Es equivalente estar inscrito en el Programa1 y hacer un doble programa con el programa2,
     que estar inscrito en el Programa2 y hacer doble programa con el Programa1.

    :param matriz_dobles: matriz de dobles programas.
    :param programa_interes: nombre de un programa de inter√©s.
    :return: diccionario, cuyas llaves son los nombres de todos los programas diferentes al programa de inter√©s
    y los valores de cada llave, son el n√∫mero de personas que realizan dicho doble programa
    (siempre y cuando este n√∫mero sea mayor a cero).

    :type matriz_dobles: list.
    :type programa_interes: str.
    :rtype: dict.

    :Ejemplo: si el programa de inter√©s es Geociencias, esta funci√≥n debe retornar un diccionario con las
    siguientes parejas llave-valor:
    {'Administracion': 1, 'Musica': 1, 'Biologia': 5, 'Fisica': 12, 'Quimica': 1, 'Antropologia': 1,
    'Ciencia Politica': 1, 'Historia': 1, 'Lenguas y Cultura': 1, 'Derecho': 1, 'Gobierno y A. Publicos': 2,
    'Ing. Ambiental': 13, 'Ing. Civil': 36, 'Ing. Electronica': 1,
    'Ing. Industrial': 2, 'Ing. Mecanica': 5, 'Ing. Quimica': 2}
    """


def estadisticas_pga(matriz_estadisticas: list) -> list:
    """ TODO
    Funci√≥n 8 ‚Äì Estad√≠sticas del PGA.

    :param matriz_estadisticas: matriz de estad√≠sticas.
    :return: lista con 3 tuplas, que corresponden respectivamente a:
        - La facultad con mayor PGA promedio.
        - La facultad con menor PGA promedio.
        - La facultad con el PGA promedio igual a la mediana de los PGA de todas las facultades.
    Cada tupla tiene 2 posiciones, en la primera posici√≥n debe ir el nombre de la facultad
    y en la segunda posici√≥n su PGA promedio.

    :type matriz_estadisticas: list.
    :rtype: list.
    """


def hay_facultad_con_porcentaje_estudiantes(matriz_estadisticas: list, genero: str, porcentaje: float) -> tuple:
    """ TODO
    Funci√≥n 9 ‚Äì Existe facultad con un determinado porcentaje de estudiantes de un g√©nero dado.
    Indica si existe alguna facultad, que tenga un porcentaje de estudiantes
    del g√©nero dado por par√°metro superior al porcentaje dado.

    :param matriz_estadisticas: matriz de estad√≠sticas.
    :param genero: una cadena que represents un g√©nero de la forma ‚Äúmujer‚Äù/‚Äùhombre‚Äù.
    :param porcentaje: un porcentaje (valor real entre 0 y 100).
    :return: tupla de 3 posiciones.
        - La primera posici√≥n sea True o False, seg√∫n se haya encontrado o no una facultad con dicha caracter√≠stica.
        - La segunda posici√≥n el nombre de la facultad, o la cadena vac√≠a en caso de no encontrar ninguna.
        - La tercera posici√≥n el porcentaje que supera al ingresado por par√°metro, o 0 en caso de que no se haya
         encontrado ninguna facultad.
         En caso de que varias facultades sobrepasen este porcentaje, la funci√≥n debe retornar la primera que encuentre.

    :type matriz_estadisticas: list.
    :type genero: str.
    :type porcentaje: float.
    :rtype: tuple.

    :Ejemplo: Supongamos que los par√°metros de entrada son: ‚Äúfemenino‚Äù (para el g√©nero) y 60 (para el porcentaje).
    En este caso estamos preguntando al programa si existe al menos una facultad que tenga m√°s del 60% de
    estudiantes mujeres. La funci√≥n debe entonces calcular, para cada facultad, la cantidad total de
    estudiantes (teniendo en cuenta tanto hombres como mujeres) y el porcentaje de estudiantes mujeres
    con respecto a este total. Posteriormente, debe buscar si existe alguna facultad, cuyo porcentaje
    de estudiantes mujeres sea superior al 60%. La Facultad de Arquitectura y Dise√±o, as√≠ como la Facultad de
    Ciencias Sociales cumplen con esta condici√≥n. La primera con un 64.04% de estudiantes mujeres y la segunda
    con un 65.68%. Esta funci√≥n debe entonces retornar alguna de estas dos facultades, la que encuentre primero,
    junto con True y el porcentaje de mujeres correspondiente.
    """
